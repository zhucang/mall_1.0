<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//en"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.UserWithdrawMapper">
    
    <resultMap type="UserWithdraw" id="UserWithdrawResult">
        <result property="id"    column="id"    />
        <result property="userId"    column="user_id"    />
        <result property="userAccount"    column="user_account"    />
        <result property="nickName"    column="nick_name"    />
        <result property="accountType"    column="account_type"    />
        <result property="sellerFlag"    column="seller_flag"    />
        <result property="agentId"    column="agent_id"    />
        <result property="agentName"    column="agent_name"    />
        <result property="orderCode"    column="order_code"    />
        <result property="withdrawAmount"    column="withdraw_amount"    />
        <result property="receivedAmount"    column="received_amount"    />
        <result property="applyTime"    column="apply_time"    />
        <result property="transTime"    column="trans_time"    />
        <result property="receiptAccountInfo"    column="receipt_account_info"    />
        <result property="walletReceiptQrCode"    column="wallet_receipt_qr_code"    />
        <result property="withdrawStatus"    column="withdraw_status"    />
        <result property="withdrawFee"    column="withdraw_fee"    />
        <result property="withdrawMsg"    column="withdraw_msg"    />
        <result property="currencyId"    column="currency_id"    />
        <result property="currencyName"    column="currency_name"    />
        <result property="withdrawType"    column="withdraw_type"    />
        <result property="userAmtBefore"    column="user_amt_before"    />
        <result property="userAmtAfter"    column="user_amt_after"    />
        <result property="operatorName"    column="operator_name"    />
        <result property="statisticalReport"    column="statistical_report"    />
        <result property="remark"    column="remark"    />
        <result property="params.userRemark"    column="user_remark"    />
        <result property="sqlVersion"    column="sql_version"    />
    </resultMap>

    <sql id="selectUserWithdrawVo">
        select a.id, user_id, user_account,nick_name,account_type,seller_flag,agent_id,agent_name,order_code,withdraw_amount,received_amount, apply_time, trans_time,operator_name, receipt_account_info,wallet_receipt_qr_code, withdraw_status, withdraw_fee, withdraw_msg, currency_id,currency_name, a.withdraw_type, user_amt_before, user_amt_after,statistical_report,a.remark,IFNULL(b.remark,"") user_remark,a.sql_version
        from user_withdraw a
                 left join user_info b
                           on a.user_id = b.id
                 left join platform_currency c
                           on a.currency_id = c.id
    </sql>

    <select id="selectUserWithdrawList" parameterType="UserWithdraw" resultMap="UserWithdrawResult">
        <include refid="selectUserWithdrawVo"/>
        <where>
            <if test="params.currencyStatus != null"> and c.`status` = 0 </if>
            <if test="userId != null "> and user_id = #{userId}</if>
            <if test="userAccount != null "> and user_account like concat('%',#{userAccount},'%') </if>
            <if test="nickName != null "> and nick_name like concat('%',#{nickName},'%') </if>
            <if test="accountType != null "> and account_type = #{accountType}</if>
            <if test="sellerFlag != null "> and seller_flag = #{sellerFlag}</if>
            <if test="orderCode != null "> and order_code like concat('%',#{orderCode},'%')</if>
            <if test="withdrawAmount != null "> and withdraw_amount = #{withdrawAmount}</if>
            <if test="applyTime != null "> <![CDATA[ and DATE_FORMAT(apply_time, '%Y-%m-%d') = DATE_FORMAT(#{applyTime}, '%Y-%m-%d')]]></if>
            <if test="receiptAccountInfo != null  and receiptAccountInfo != ''"> and receipt_account_info = #{receiptAccountInfo}</if>
            <if test="withdrawStatus != null "> and withdraw_status = #{withdrawStatus}</if>
            <if test="withdrawFee != null "> and withdraw_fee = #{withdrawFee}</if>
            <if test="withdrawMsg != null  and withdrawMsg != ''"> and withdraw_msg = #{withdrawMsg}</if>
            <if test="currencyId != null "> and currency_id = #{currencyId}</if>
            <if test="withdrawType != null "> and a.withdraw_type = #{withdrawType}</if>
            <if test="userAmtBefore != null "> and user_amt_before = #{userAmtBefore}</if>
            <if test="userAmtAfter != null "> and user_amt_after = #{userAmtAfter}</if>
            <if test="statisticalReport != null "> and statistical_report = #{statisticalReport}</if>
            <if test="agentId != null and params.isAllAgentData != null and params.isAllAgentData == 0">
                and agent_id in (select user_id from agent_team_level_line where sup_user_id = #{agentId} union select #{agentId})
            </if>
            <if test="agentId != null and params.isAllAgentData == null">
                and agent_id = #{agentId}
            </if>
            <if test="startTime !=null ">
                <![CDATA[   and DATE_FORMAT(trans_time, '%Y-%m-%d %H:%i:%s')>=  DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s')   ]]></if>
            <if test="endTime !=null ">
                <![CDATA[  and DATE_FORMAT(trans_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s')    ]]></if>
            ${params.dataScope}
        </where>
    </select>


    <select id="getStatisticalData" parameterType="UserWithdraw" resultMap="UserWithdrawResult">
        select sum(received_amount) withdraw_amount,currency_id,currency_name
        from user_withdraw a
        left join user_info b
        on a.user_id = b.id
        left join platform_currency c
        on a.currency_id = c.id
        <where>
            and withdraw_status = 1 and c.`status` = 0 and statistical_report = 0
            <if test="userId != null "> and user_id = #{userId}</if>
            <if test="userAccount != null "> and user_account like concat('%',#{userAccount},'%') </if>
            <if test="nickName != null "> and nick_name like concat('%',#{nickName},'%') </if>
            <if test="accountType != null "> and account_type = #{accountType}</if>
            <if test="withdrawAmount != null "> and withdraw_amount = #{withdrawAmount}</if>
            <if test="applyTime != null "> <![CDATA[ and DATE_FORMAT(apply_time, '%Y-%m-%d') = DATE_FORMAT(#{applyTime}, '%Y-%m-%d')]]></if>
            <if test="transTime != null "> <![CDATA[ and DATE_FORMAT(trans_time, '%Y-%m-%d') = DATE_FORMAT(#{transTime}, '%Y-%m-%d')]]></if>
            <if test="receiptAccountInfo != null  and receiptAccountInfo != ''"> and receipt_account_info = #{receiptAccountInfo}</if>
            <if test="withdrawStatus != null "> and withdraw_status = #{withdrawStatus}</if>
            <if test="withdrawFee != null "> and withdraw_fee = #{withdrawFee}</if>
            <if test="withdrawMsg != null  and withdrawMsg != ''"> and withdraw_msg = #{withdrawMsg}</if>
            <if test="currencyId != null "> and currency_id = #{currencyId}</if>
            <if test="withdrawType != null "> and a.withdraw_type = #{withdrawType}</if>
            <if test="userAmtBefore != null "> and user_amt_before = #{userAmtBefore}</if>
            <if test="userAmtAfter != null "> and user_amt_after = #{userAmtAfter}</if>
            <if test="statisticalReport != null "> and statistical_report = #{statisticalReport}</if>
            <if test="agentId != null and params.isAllAgentData != null and params.isAllAgentData == 0">
                and agent_id in (select user_id from agent_team_level_line where sup_user_id = #{agentId} union select #{agentId})
            </if>
            <if test="agentId != null and params.isAllAgentData == null">
                and agent_id = #{agentId}
            </if>
            <if test="startTime !=null ">
                <![CDATA[   and DATE_FORMAT(trans_time, '%Y-%m-%d %H:%i:%s')>=  DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s')   ]]></if>
            <if test="endTime !=null ">
                <![CDATA[  and DATE_FORMAT(trans_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s')    ]]></if>
            ${params.dataScope}
        </where>
        group by currency_id
    </select>

    <select id="selectUserWithdrawListWithOthers" parameterType="UserWithdraw" resultMap="UserWithdrawResult">
        select user_id, order_code, withdraw_amount, withdraw_fee, received_amount, apply_time, trans_time,receipt_account_info, wallet_receipt_qr_code, withdraw_status, currency_id, withdraw_type,user_amt_before, user_amt_after, remark from user_withdraw
        <where>
            <if test="userId != null "> and user_id = #{userId}</if>
            <if test="orderCode != null "> and order_code like concat('%',#{orderCode},'%')</if>
            <if test="withdrawStatus != null "> and withdraw_status = #{withdrawStatus}</if>
            <if test="currencyId != null "> and currency_id = #{currencyId}</if>
            <if test="statisticalReport != null "> and statistical_report = #{statisticalReport}</if>
            <if test="startTime !=null ">
                <![CDATA[   and DATE_FORMAT(trans_time, '%Y-%m-%d %H:%i:%s')>=  DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s')   ]]></if>
            <if test="endTime !=null ">
                <![CDATA[  and DATE_FORMAT(trans_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s')    ]]></if>
            ${params.dataScope}
        </where>
        <if test="params.unionWinnings != null ">
            union
            select user_id, order_code, -order_amount,withdraw_status,order_amount,create_time,create_time,'','',1,currency_id,1, user_amount_before, user_amount_after, remark
            from (
            select user_id, order_code, order_amount,0 as withdraw_status,create_time,currency_id, user_amount_before, user_amount_after, remark from user_winnings_change_record a
            left join platform_currency b
            on a.currency_id = b.id
            where order_type = 2) as a
            <where>
                <if test="userId != null "> and user_id = #{userId}</if>
                <if test="orderCode != null "> and order_code like concat('%',#{orderCode},'%')</if>
                <if test="withdrawStatus != null "> and withdraw_status = #{withdrawStatus}</if>
                <if test="currencyId != null "> and currency_id = #{currencyId}</if>
                <if test="statisticalReport != null "> and statistical_report = #{statisticalReport}</if>
                <if test="startTime !=null ">
                    <![CDATA[   and DATE_FORMAT(trans_time, '%Y-%m-%d %H:%i:%s')>=  DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s')   ]]></if>
                <if test="endTime !=null ">
                    <![CDATA[  and DATE_FORMAT(trans_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s')    ]]></if>
                ${params.dataScope}
            </where>
        </if>
        <if test="params.unionDownPoint != null ">
            union
            select user_id, order_code, -order_amount,withdraw_status,order_amount,create_time,create_time,'','',1,currency_id,1, user_amount_before, user_amount_after, remark
            from (
            select user_id, order_code, order_amount,0 as withdraw_status,create_time,currency_id, user_amount_before, user_amount_after, remark from user_point_change_record a
            left join platform_currency b
            on a.currency_id = b.id
            where order_type = 1) as a
            <where>
                <if test="userId != null "> and user_id = #{userId}</if>
                <if test="orderCode != null "> and order_code like concat('%',#{orderCode},'%')</if>
                <if test="withdrawStatus != null "> and withdraw_status = #{withdrawStatus}</if>
                <if test="currencyId != null "> and currency_id = #{currencyId}</if>
                <if test="statisticalReport != null "> and statistical_report = #{statisticalReport}</if>
                <if test="startTime !=null ">
                    <![CDATA[   and DATE_FORMAT(trans_time, '%Y-%m-%d %H:%i:%s')>=  DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s')   ]]></if>
                <if test="endTime !=null ">
                    <![CDATA[  and DATE_FORMAT(trans_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s')    ]]></if>
                ${params.dataScope}
            </where>
        </if>
    </select>

    <select id="selectUserWithdrawById" parameterType="Long" resultMap="UserWithdrawResult">
        <include refid="selectUserWithdrawVo"/>
        where a.id = #{id}
    </select>
        
    <insert id="insertUserWithdraw" parameterType="UserWithdraw" useGeneratedKeys="true" keyProperty="id">
        insert into user_withdraw
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="orderCode != null">order_code,</if>
            <if test="withdrawAmount != null">withdraw_amount,</if>
            <if test="applyTime != null">apply_time,</if>
            <if test="transTime != null">trans_time,</if>
            <if test="receiptAccountInfo != null and receiptAccountInfo != ''">receipt_account_info,</if>
            <if test="withdrawStatus != null">withdraw_status,</if>
            <if test="withdrawFee != null">withdraw_fee,</if>
            <if test="withdrawMsg != null">withdraw_msg,</if>
            <if test="currencyId != null">currency_id,</if>
            <if test="withdrawType != null">withdraw_type,</if>
            <if test="userAmtBefore != null">user_amt_before,</if>
            <if test="userAmtAfter != null">user_amt_after,</if>
            <if test="walletReceiptQrCode != null">wallet_receipt_qr_code,</if>
            <if test="remark != null">remark,</if>
            <if test="statisticalReport != null">statistical_report,</if>
            <if test="receivedAmount != null">received_amount,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="orderCode != null">#{orderCode},</if>
            <if test="withdrawAmount != null">#{withdrawAmount},</if>
            <if test="applyTime != null">#{applyTime},</if>
            <if test="transTime != null">#{transTime},</if>
            <if test="receiptAccountInfo != null and receiptAccountInfo != ''">#{receiptAccountInfo},</if>
            <if test="withdrawStatus != null">#{withdrawStatus},</if>
            <if test="withdrawFee != null">#{withdrawFee},</if>
            <if test="withdrawMsg != null">#{withdrawMsg},</if>
            <if test="currencyId != null">#{currencyId},</if>
            <if test="withdrawType != null">#{withdrawType},</if>
            <if test="userAmtBefore != null">#{userAmtBefore},</if>
            <if test="userAmtAfter != null">#{userAmtAfter},</if>
            <if test="walletReceiptQrCode != null">#{walletReceiptQrCode},</if>
            <if test="remark != null">#{remark},</if>
            <if test="statisticalReport != null">#{statisticalReport},</if>
            <if test="receivedAmount != null">#{receivedAmount},</if>
         </trim>
    </insert>

    <update id="updateUserWithdraw" parameterType="UserWithdraw">
        update user_withdraw
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">user_id = #{userId},</if>
            <if test="withdrawAmount != null">withdraw_amount = #{withdrawAmount},</if>
            <if test="applyTime != null">apply_time = #{applyTime},</if>
            <if test="transTime != null">trans_time = #{transTime},</if>
            <if test="receiptAccountInfo != null and receiptAccountInfo != ''">receipt_account_info = #{receiptAccountInfo},</if>
            <if test="withdrawStatus != null">withdraw_status = #{withdrawStatus},</if>
            <if test="withdrawFee != null">withdraw_fee = #{withdrawFee},</if>
            <if test="withdrawMsg != null">withdraw_msg = #{withdrawMsg},</if>
            <if test="currencyId != null">currency_id = #{currencyId},</if>
            <if test="withdrawType != null">withdraw_type = #{withdrawType},</if>
            <if test="userAmtBefore != null">user_amt_before = #{userAmtBefore},</if>
            <if test="userAmtAfter != null">user_amt_after = #{userAmtAfter},</if>
            <if test="operatorName != null">operator_name = #{operatorName},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="statisticalReport != null">statistical_report = #{statisticalReport},</if>
            <if test="receivedAmount != null">received_amount = #{receivedAmount},</if>
            <if test="sqlVersion != null">sql_version = sql_version + 1,</if>
        </trim>
        where id = #{id}
        <if test="sqlVersion != null">and sql_version = #{sqlVersion}</if>
    </update>

    <delete id="deleteUserWithdrawById" parameterType="Long">
        delete from user_withdraw where id = #{id}
    </delete>

    <delete id="deleteUserWithdrawByIds" parameterType="String">
        delete from user_withdraw where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="getUserWithdrawPendingReviewNum" resultType="java.lang.Long">
        select a.id
        from user_withdraw a
        LEFT JOIN user_info b
        on a.user_id = b.id
        where withdraw_status = 0
        <if test="params.tourists != null and params.tourists != 0">
            and account_type = 0
        </if>
        <if test="params.dataScope != null and params.dataScope != ''">
            ${params.dataScope}
        </if>
    </select>

    <select id="getUserHoldingPositionNumByUserId" resultType="java.lang.Integer">
        select sum(count) from (
                                   select count(1) as count from user_stock_position where user_id = #{userId} and order_status = 0
                                   union all
                                   select count(1) as count from user_cryptocurrency_position where user_id = #{userId} and order_status = 0
                                   union all
                                   select count(1) as count from user_futures_position where user_id = #{userId} and order_status = 0
                                   union all
                                   select count(1) as count from user_forex_position where user_id = #{userId} and order_status = 0) as a
    </select>

    <select id="getUserWithdrawPendingReviewNumByUserId" resultType="java.lang.Integer">
        select count(1) from user_withdraw a where withdraw_status = 0 and user_id = #{userId}
    </select>

    <select id="getWithCountTodayByUserId" resultType="java.lang.Integer">
        select count(1) from user_withdraw where (withdraw_status = 1 or withdraw_status = 0) and user_id = #{userId}
                                             and currency_id = #{currencyId}
        <![CDATA[  and DATE_FORMAT(apply_time, '%Y-%m-%d')>=  DATE_FORMAT(#{today}, '%Y-%m-%d')   ]]>
    </select>

    <select id="selectUserWithdrawAmountAllCurrency" resultMap="UserWithdrawResult">
        select sum(received_amount) withdraw_amount,currency_id,currency_name
        <if test="userId != null">
            ,user_id
        </if>
        from user_withdraw a
                 left join platform_currency b
                           on a.currency_id = b.id
        where withdraw_status = 1 and b.`status` = 0 and statistical_report = 0
        <if test="userId != null">
            and user_id = #{userId}
        </if>
        group by currency_id;
    </select>


</mapper>